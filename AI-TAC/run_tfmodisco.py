import h5py
import os
import numpy as np
import tqdm
from collections import OrderedDict
import modisco
import click
import tqdm

def prepare_tfm_inputs(shap_score_hdf5_path):
    """
    Imports the Shap scores generated/saved by `generate_scores.py`, and returns
    the actual and hypothetical importance scores.
    Arguments:
        `shap_score_hdf5_path`: path to HDF5 of Shap scores generated by
            `generate_scores.py`
    Returns the hypothetical importance scores, actual importance scores, and
    corresponding one-hot encoded input sequences. The scores are returned as
    an OrderedDict. Scores and sequences have shape N x I x 4, where N is the
    number of explained sequences, and I is the sequence length.
    """
    score_reader = h5py.File(shap_score_hdf5_path, "r")

    # AI-TAC scores/sequences were computed as N x 4 x I
    num_seqs, _, input_length = score_reader["hyp_scores"].shape

    # For batching up data loading
    batch_size = min(1000, num_seqs)
    num_batches = int(np.ceil(num_seqs / batch_size))

    # Read in hypothetical scores/input sequences
    hyp_scores = np.empty((num_seqs, input_length, 4), dtype=float)
    input_seqs = np.empty((num_seqs, input_length, 4), dtype=float)
    for i in tqdm.trange(num_batches, desc="Importing scores"):
        batch_slice = slice(i * batch_size, (i + 1) * batch_size)
        # Swap the dimensions back to N x I x 4
        hyp_scores[batch_slice] = np.swapaxes(
            score_reader["hyp_scores"][batch_slice], 1, 2
        )
        input_seqs[batch_slice] = np.swapaxes(
            score_reader["one_hot_seqs"][batch_slice], 1, 2
        )
    
    # Compute actual scores
    act_scores = hyp_scores * input_seqs

    # Put scores into OrderedDict
    task_to_hyp_scores, task_to_act_scores = OrderedDict(), OrderedDict()
    task_to_hyp_scores["task0"] = hyp_scores
    task_to_act_scores["task0"] = act_scores

    return task_to_hyp_scores, task_to_act_scores, input_seqs


@click.command()
@click.option(
    "--outfile", "-o", required=True,
    help="Where to store the HDF5 with TF-MoDISco results"
)
@click.option(
    "--seqlet-outfile", "-q", default=None,
    help="If specified, save the seqlets here"
)
@click.argument("shap_score_hdf5_path", nargs=1)
def main(shap_score_hdf5_path, outfile, seqlet_outfile):
    """
    Takes the set of importance scores generated by `generate_scores.py` and
    runs TF-MoDISco on them.
    """
    task_to_hyp_scores, task_to_act_scores, input_seqs = prepare_tfm_inputs(
        shap_score_hdf5_path
    )

    # Construct workflow pipeline
    null_per_pos_scores = modisco.coordproducers.LaplaceNullDist(
        num_to_samp=5000
    )
    tfm_workflow = modisco.tfmodisco_workflow.workflow.TfModiscoWorkflow(
    	sliding_window_size=15,
    	flank_size=5,
    	target_seqlet_fdr=0.15,
    	seqlets_to_patterns_factory=modisco.tfmodisco_workflow.seqlets_to_patterns.TfModiscoSeqletsToPatternsFactory(
    	    trim_to_window_size=15,
    	    initial_flank_to_add=5,
    	    kmer_len=5,
    	    num_gaps=1,
    	    num_mismatches=0,
    	    final_min_cluster_size=60
    	)
    )

    # Move to output directory to do work
    cwd = os.getcwd()
    os.chdir(os.path.dirname(outfile))

    tfm_results = tfm_workflow(
        task_names=list(task_to_act_scores.keys()),
        contrib_scores=task_to_act_scores,
        hypothetical_contribs=task_to_hyp_scores,
        one_hot=input_seqs,
        null_per_pos_scores = null_per_pos_scores
    )

    os.chdir(cwd)
    print("Saving results to %s" % outfile)
    with h5py.File(outfile, "w") as f:
        tfm_results.save_hdf5(f)

    if seqlet_outfile:
        print("Saving seqlets to %s" % seqlet_outfile)
        seqlets = \
            tfm_results.metacluster_idx_to_submetacluster_results[0].seqlets
        bases = np.array(["A", "C", "G", "T"])
        with open(seqlet_outfile, "w") as f:
            for seqlet in seqlets:
                sequence = "".join(
                    bases[np.argmax(seqlet["sequence"].fwd, axis=-1)]
                )
                example_index = seqlet.coor.example_idx
                start, end = seqlet.coor.start, seqlet.coor.end
                f.write(">example%d:%d-%d\n" % (example_index, start, end))
                f.write(sequence + "\n")


if __name__ == "__main__":
    main()
