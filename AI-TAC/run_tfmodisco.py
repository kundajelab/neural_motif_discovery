import h5py
import os
import numpy as np
import tqdm
from collections import OrderedDict
import modisco
import click

def import_shap_scores(shap_scores_hdf5):
    """
    Imports the SHAP scores generated/saved by `make_shap_scores.py`, and
    returns the hypothetical importance scores, actual importance scores, and
    one-hot encoded sequences.
    Arguments:
        `shap_scores_hdf5`: path to HDF5 of SHAP scores generated by
            `make_shap_scores.py`
    Returns the hypothetical importance scores, actual importance scores, and
    corresponding one-hot encoded input sequences. Each is an N x L x 4 array,
    where L is the cut size (or default size).
    """
    score_reader = h5py.File(shap_scores_hdf5, "r")

    # For defining shapes
    # AI-TAC scores/sequences were computed as N x 4 x L
    num_seqs, _, input_length = score_reader["hyp_scores"].shape

    # For batching up data loading
    batch_size = min(1000, num_seqs)
    num_batches = int(np.ceil(num_seqs / batch_size))

    # Read in hypothetical scores and input sequences in batches
    hyp_scores = np.empty((num_seqs, input_length, 4))
    act_scores = np.empty((num_seqs, input_length, 4))
    one_hot_seqs = np.empty((num_seqs, input_length, 4))

    for i in tqdm.trange(num_batches, desc="Importing SHAP scores"):
        batch_slice = slice(i * batch_size, (i + 1) * batch_size)
        # Swap the dimensions back to N x L x 4
        hyp_score_batch = np.swapaxes(
            score_reader["hyp_scores"][batch_slice], 1, 2
        )
        one_hot_seq_batch= np.swapaxes(
            score_reader["one_hot_seqs"][batch_slice], 1, 2
        )

        hyp_scores[batch_slice] = hyp_score_batch
        one_hot_seqs[batch_slice] = one_hot_seq_batch
        act_scores[batch_slice] = hyp_score_batch * one_hot_seq_batch

    score_reader.close()

    return hyp_scores, act_scores, one_hot_seqs


@click.command()
@click.argument("shap_scores_hdf5", nargs=1)
@click.option(
    "--outfile", "-o", required=True,
    help="Where to store the HDF5 with TF-MoDISco results"
)
@click.option(
    "--seqlet-outfile", "-s", default=None,
    help="If specified, save the seqlets here in a FASTA file"
)
def main(shap_scores_hdf5, outfile, seqlet_outfile):
    """
    Takes the set of importance scores generated by `make_shap_scores.py` and
    runs TF-MoDISco on them.
    """
    hyp_scores, act_scores, one_hot_seqs = import_shap_scores(shap_scores_hdf5)
    task_to_hyp_scores, task_to_act_scores = OrderedDict(), OrderedDict()
    task_to_hyp_scores["task0"] = hyp_scores
    task_to_act_scores["task0"] = act_scores

    # Construct workflow pipeline
    tfm_workflow = modisco.tfmodisco_workflow.workflow.TfModiscoWorkflow(
    	sliding_window_size=15,
    	flank_size=5,
        target_seqlet_fdr=0.05,
    	seqlets_to_patterns_factory=modisco.tfmodisco_workflow.seqlets_to_patterns.TfModiscoSeqletsToPatternsFactory(
    	    trim_to_window_size=15,
    	    initial_flank_to_add=5,
    	    kmer_len=5,
    	    num_gaps=1,
    	    num_mismatches=0,
    	    final_min_cluster_size=60
    	)
    )

    # Move to output directory to do work
    cwd = os.getcwd()
    os.makedirs(os.path.dirname(outfile), exist_ok=True)
    os.chdir(os.path.dirname(outfile))

    tfm_results = tfm_workflow(
        task_names=list(task_to_act_scores.keys()),
        contrib_scores=task_to_act_scores,
        hypothetical_contribs=task_to_hyp_scores,
        one_hot=one_hot_seqs
    )

    os.chdir(cwd)
    print("Saving results to %s" % outfile)
    with h5py.File(outfile, "w") as f:
        tfm_results.save_hdf5(f)

    if seqlet_outfile:
        print("Saving seqlets to %s" % seqlet_outfile)
        seqlets = \
            tfm_results.metacluster_idx_to_submetacluster_results[0].seqlets
        bases = np.array(["A", "C", "G", "T"])
        with open(seqlet_outfile, "w") as f:
            for seqlet in seqlets:
                sequence = "".join(
                    bases[np.argmax(seqlet["sequence"].fwd, axis=-1)]
                )
                example_index = seqlet.coor.example_idx
                start, end = seqlet.coor.start, seqlet.coor.end
                f.write(">example%d:%d-%d\n" % (example_index, start, end))
                f.write(sequence + "\n")


if __name__ == "__main__":
    main()
